{
  "javascript_detail": "Y29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0mbGlzdD0nOwoKZnVuY3Rpb24gZ2V0dXJsKGlkKSB7CiAgICByZXR1cm4gewogICAgICAgIHVybDogQkFTRV9VUkwgKyBpZCwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzE1XzYpIEFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi8xNC4wLjMgU2FmYXJpLzYwNS4xLjE1JwogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gZ2V0VmlkZW9IVE1MUGFnZShib2R5KSB7CiAgICBsZXQgZGF0YSA9IGZpbmRKU09OKCdkZXRhaWwuaHRtbCcsICdkZXRhaWxfcmVzcG9uc2UnLCBib2R5LCAvXGJ5dEluaXRpYWxEYXRhXHMqPVxzKnsvLCAnPC9zY3JpcHQ+JywgJ3snKTsKICAgIGxldCBqc29uID0gZ2V0U2VhcmNoSnNvbihkYXRhKQogICAgcmV0dXJuIGpzb24KfQoKZnVuY3Rpb24gZmluZEpTT04oc291cmNlLCB2YXJOYW1lLCBib2R5LCBsZWZ0LCByaWdodCwgcHJlcGVuZEpTT04pIHsKICAgIGxldCBqc29uU3RyID0gYmV0d2Vlbihib2R5LCBsZWZ0LCByaWdodCk7CiAgICBpZiAoIWpzb25TdHIpIHsKICAgICAgICB0aHJvdyBFcnJvcihgQ291bGQgbm90IGZpbmQgJHt2YXJOYW1lfSBpbiAke3NvdXJjZX1gKTsKICAgIH0KICAgIHJldHVybiBwYXJzZUpTT04oc291cmNlLCB2YXJOYW1lLCBjdXRBZnRlckpTT04oYCR7cHJlcGVuZEpTT059JHtqc29uU3RyfWApKTsKfTsKCmJldHdlZW4gPSAoaGF5c3RhY2ssIGxlZnQsIHJpZ2h0KSA9PiB7CiAgICBsZXQgcG9zOwogICAgaWYgKGxlZnQgaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgICBjb25zdCBtYXRjaCA9IGhheXN0YWNrLm1hdGNoKGxlZnQpOwogICAgICAgIGlmICghbWF0Y2gpIHsgcmV0dXJuICcnOyB9CiAgICAgICAgcG9zID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7CiAgICB9IGVsc2UgewogICAgICAgIHBvcyA9IGhheXN0YWNrLmluZGV4T2YobGVmdCk7CiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHsgcmV0dXJuICcnOyB9CiAgICAgICAgcG9zICs9IGxlZnQubGVuZ3RoOwogICAgfQogICAgaGF5c3RhY2sgPSBoYXlzdGFjay5zbGljZShwb3MpOwogICAgcG9zID0gaGF5c3RhY2suaW5kZXhPZihyaWdodCk7CiAgICBpZiAocG9zID09PSAtMSkgeyByZXR1cm4gJyc7IH0KICAgIGhheXN0YWNrID0gaGF5c3RhY2suc2xpY2UoMCwgcG9zKTsKICAgIHJldHVybiBoYXlzdGFjazsKfTsKCmN1dEFmdGVySlNPTiA9IG1peGVkSnNvbiA9PiB7CiAgICBsZXQgb3BlbiwgY2xvc2U7CiAgICBpZiAobWl4ZWRKc29uWzBdID09PSAnWycpIHsKICAgICAgICBvcGVuID0gJ1snOwogICAgICAgIGNsb3NlID0gJ10nOwogICAgfSBlbHNlIGlmIChtaXhlZEpzb25bMF0gPT09ICd7JykgewogICAgICAgIG9wZW4gPSAneyc7CiAgICAgICAgY2xvc2UgPSAnfSc7CiAgICB9CgogICAgaWYgKCFvcGVuKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjdXQgdW5zdXBwb3J0ZWQgSlNPTiAobmVlZCB0byBiZWdpbiB3aXRoIFsgb3IgeyApIGJ1dCBnb3Q6ICR7bWl4ZWRKc29uWzBdfWApOwogICAgfQoKICAgIC8vIFN0YXRlcyBpZiB0aGUgbG9vcCBpcyBjdXJyZW50bHkgaW4gYSBzdHJpbmcKICAgIGxldCBpc1N0cmluZyA9IGZhbHNlOwoKICAgIC8vIFN0YXRlcyBpZiB0aGUgY3VycmVudCBjaGFyYWN0ZXIgaXMgdHJlYXRlZCBhcyBlc2NhcGVkIG9yIG5vdAogICAgbGV0IGlzRXNjYXBlZCA9IGZhbHNlOwoKICAgIC8vIEN1cnJlbnQgb3BlbiBicmFja2V0cyB0byBiZSBjbG9zZWQKICAgIGxldCBjb3VudGVyID0gMDsKCiAgICBsZXQgaTsKICAgIGZvciAoaSA9IDA7IGkgPCBtaXhlZEpzb24ubGVuZ3RoOyBpKyspIHsKICAgICAgICAvLyBUb2dnbGUgdGhlIGlzU3RyaW5nIGJvb2xlYW4gd2hlbiBsZWF2aW5nL2VudGVyaW5nIHN0cmluZwogICAgICAgIGlmIChtaXhlZEpzb25baV0gPT09ICciJyAmJiAhaXNFc2NhcGVkKSB7CiAgICAgICAgICAgIGlzU3RyaW5nID0gIWlzU3RyaW5nOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIC8vIFRvZ2dsZSB0aGUgaXNFc2NhcGVkIGJvb2xlYW4gZm9yIGV2ZXJ5IGJhY2tzbGFzaAogICAgICAgIC8vIFJlc2V0IGZvciBldmVyeSByZWd1bGFyIGNoYXJhY3RlcgogICAgICAgIGlzRXNjYXBlZCA9IG1peGVkSnNvbltpXSA9PT0gJ1xcJyAmJiAhaXNFc2NhcGVkOwoKICAgICAgICBpZiAoaXNTdHJpbmcpIGNvbnRpbnVlOwoKICAgICAgICBpZiAobWl4ZWRKc29uW2ldID09PSBvcGVuKSB7CiAgICAgICAgICAgIGNvdW50ZXIrKzsKICAgICAgICB9IGVsc2UgaWYgKG1peGVkSnNvbltpXSA9PT0gY2xvc2UpIHsKICAgICAgICAgICAgY291bnRlci0tOwogICAgICAgIH0KCiAgICAgICAgLy8gQWxsIGJyYWNrZXRzIGhhdmUgYmVlbiBjbG9zZWQsIHRodXMgZW5kIG9mIEpTT04gaXMgcmVhY2hlZAogICAgICAgIGlmIChjb3VudGVyID09PSAwKSB7CiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgY3V0IEpTT04KICAgICAgICAgICAgcmV0dXJuIG1peGVkSnNvbi5zdWJzdHIoMCwgaSArIDEpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBXZSByYW4gdGhyb3VnaCB0aGUgd2hvbGUgc3RyaW5nIGFuZCBlbmRlZCB1cCB3aXRoIGFuIHVuY2xvc2VkIGJyYWNrZXQKICAgIHRocm93IEVycm9yKCJDYW4ndCBjdXQgdW5zdXBwb3J0ZWQgSlNPTiAobm8gbWF0Y2hpbmcgY2xvc2luZyBicmFja2V0IGZvdW5kKSIpOwp9OwoKY29uc3QganNvbkNsb3NpbmdDaGFycyA9IC9eWylcXX0nXHNdKy87CmZ1bmN0aW9uIHBhcnNlSlNPTihzb3VyY2UsIHZhck5hbWUsIGpzb24pIHsKICAgIGlmICghanNvbiB8fCB0eXBlb2YganNvbiA9PT0gJ29iamVjdCcpIHsKICAgICAgICByZXR1cm4ganNvbjsKICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAganNvbiA9IGpzb24ucmVwbGFjZShqc29uQ2xvc2luZ0NoYXJzLCAnJyk7CiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICB0aHJvdyBFcnJvcihgRXJyb3IgcGFyc2luZyAke3Zhck5hbWV9IGluICR7c291cmNlfTogJHtlcnIubWVzc2FnZX1gKTsKICAgICAgICB9CiAgICB9Cn07CgpmdW5jdGlvbiBnZXRTZWFyY2hKc29uKGRhdGEpIHsKCiAgICBjb25zdCB2aWRlb3MgPSBkYXRhLmNvbnRlbnRzLnR3b0NvbHVtbldhdGNoTmV4dFJlc3VsdHMucGxheWxpc3QucGxheWxpc3QuY29udGVudHMKICAgIGxldCBqc29uRGF0YSA9IHRvanNvbih2aWRlb3MpCgogICAgY29uc29sZS5sb2coJy0tLS0tZG9uZSAtLS0tLS0tJywganNvbkRhdGEpCiAgICByZXR1cm4ganNvbkRhdGEKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KZnVuY3Rpb24gdG9qc29uKGxpc3QpIHsKICAgIGNvbnN0IHJlc3VsdCA9IGxpc3QKICAgICAgICAubWFwKChpdGVtKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHZpZGVvID0gdG9WaWRlbyhpdGVtKQogICAgICAgICAgICBpZiAodmlkZW8pIHsKICAgICAgICAgICAgICAgIHJldHVybiB2aWRlbwogICAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuZmlsdGVyKChlKSA9PiBlKTsgLy8gcmVtb3ZlIG51bGwgdmFsdWVzCgogICAgY29uc3QganNvbkRhdGEgPSB7CiAgICAgICAgcmVzdWx0czogcmVzdWx0CiAgICB9CiAgICBjb25zb2xlLmxvZygnLS0tLS1kb25lIC0tLS0tLS0nKQogICAgcmV0dXJuIGpzb25EYXRhCn0KCmZ1bmN0aW9uIHRvVmlkZW8oaXRlbSkgewogICAgdHJ5IHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBsYXlsaXN0UGFuZWxWaWRlb1JlbmRlcmVyOiB7CiAgICAgICAgICAgICAgICB0aXRsZSwKICAgICAgICAgICAgICAgIHNob3J0QnlsaW5lVGV4dDogeyBydW5zIH0sCiAgICAgICAgICAgICAgICB0aHVtYm5haWwsCiAgICAgICAgICAgICAgICB2aWRlb0lkLAogICAgICAgICAgICAgICAgbGVuZ3RoVGV4dDogeyBzaW1wbGVUZXh0OiB0aW1lIH0KICAgICAgICAgICAgfSwKICAgICAgICB9ID0gaXRlbTsKCiAgICAgICAgaWYgKHZpZGVvSWQgPT09ICc5eHAxWFdtSl9XbycpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHR5cGU6IDAsCiAgICAgICAgICAgIHRpdGxlOiB0aXRsZS5zaW1wbGVUZXh0LAogICAgICAgICAgICBkZXNjcmlwdGlvbjogcnVuc1swXSA/IHJ1bnNbMF0udGV4dCA6ICIiLAogICAgICAgICAgICBpbWFnZTogdGh1bWJuYWlsLnRodW1ibmFpbHMuc2xpY2UoLTEpWzBdLnVybCwKICAgICAgICAgICAgdmlkZW9JZCwKICAgICAgICAgICAgdGltZTogdGltZQogICAgICAgIH07CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS5sb2coZSkKICAgICAgICByZXR1cm4gbnVsbAogICAgfQp9",
  "javascript_getlink": "",
  "javascript_upNext": "Y29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly93d3cueW91dHViZS5jb20nOwoKZnVuY3Rpb24gZ2V0dXJsKGlkKSB7CiAgICByZXR1cm4gewogICAgICAgIHVybDogYCR7QkFTRV9VUkx9L3dhdGNoP3Y9JHtpZH0mYXBwPWRlc2t0b3BgLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNikgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE0LjAuMyBTYWZhcmkvNjA1LjEuMTUnCiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBnZXRXYXRjaEhUTUxQYWdlKGJvZHkpIHsKICAgIGxldCBkYXRhID0gZmluZEpTT04oJ25leHQuaHRtbCcsICduZXh0X3Jlc3BvbnNlJywgYm9keSwgL1xieXRJbml0aWFsRGF0YVxzKj1ccyp7LywgJzwvc2NyaXB0PicsICd7Jyk7CiAgICByZXR1cm4gbmV4dFZpZGVvcyhkYXRhKQp9OwoKZnVuY3Rpb24gbmV4dFZpZGVvcyhkYXRhKSB7CiAgICB2YXIgY29udGVudHMKICAgIHRyeSB7CiAgICAgIGNvbnRlbnRzID0gZGF0YS5wbGF5ZXJPdmVybGF5cy5wbGF5ZXJPdmVybGF5UmVuZGVyZXIuZW5kU2NyZWVuLndhdGNoTmV4dEVuZFNjcmVlblJlbmRlcmVyLnJlc3VsdHM7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb250ZW50cyA9IGRhdGEuY29udGVudHMudHdvQ29sdW1uV2F0Y2hOZXh0UmVzdWx0cy5zZWNvbmRhcnlSZXN1bHRzLnNlY29uZGFyeVJlc3VsdHMucmVzdWx0cwogICAgfQogICAgCiAgICB2YXIgcmVzdWx0ID0gW10KCiAgICBjb250ZW50cy5mb3JFYWNoKGNvbnRlbnQgPT4gewogICAgICAgICAgbGV0IHZpZGVvID0gdG9WaWRlbyhjb250ZW50KQogICAgICAgICAgaWYgKHZpZGVvKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZpZGVvKQogICAgICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0Cn0KCmZ1bmN0aW9uIHRvVmlkZW8oaXRlbSkgewogICAgdHJ5IHsKICAgICAgdmFyIHZpZGVvUmVuZGVyZXIgPSBpdGVtLmVuZFNjcmVlblZpZGVvUmVuZGVyZXIKICAgICAgaWYgKHZpZGVvUmVuZGVyZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHZpZGVvUmVuZGVyZXIgPSBpdGVtLmNvbXBhY3RWaWRlb1JlbmRlcmVyCiAgICAgIH0KICAgICAgY29uc3QgewogICAgICAgIHRpdGxlLAogICAgICAgIHNob3J0QnlsaW5lVGV4dDogeyBydW5zIH0sCiAgICAgICAgdGh1bWJuYWlsLAogICAgICAgIHZpZGVvSWQsCiAgICAgICAgbGVuZ3RoVGV4dDogeyBzaW1wbGVUZXh0OiB0aW1lIH0KICAgICAgfSA9IHZpZGVvUmVuZGVyZXI7CiAgCiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogMCwKICAgICAgICB0aXRsZTogdGl0bGUuc2ltcGxlVGV4dCwKICAgICAgICBkZXNjcmlwdGlvbjogcnVuc1swXSA/IHJ1bnNbMF0udGV4dCA6ICIiLAogICAgICAgIGltYWdlOiB0aHVtYm5haWwudGh1bWJuYWlscy5zbGljZSgtMSlbMF0udXJsLAogICAgICAgIHZpZGVvSWQsCiAgICAgICAgdGltZTogdGltZQogICAgICB9OwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5sb2coInRvVmlkZW8iLCBlcnJvcikKICAgICAgcmV0dXJuIG51bGwKICAgIH0KICB9CgpmdW5jdGlvbiBmaW5kSlNPTihzb3VyY2UsIHZhck5hbWUsIGJvZHksIGxlZnQsIHJpZ2h0LCBwcmVwZW5kSlNPTikgewogICAgbGV0IGpzb25TdHIgPSBiZXR3ZWVuKGJvZHksIGxlZnQsIHJpZ2h0KTsKICAgIGlmICghanNvblN0cikgewogICAgICB0aHJvdyBFcnJvcihgQ291bGQgbm90IGZpbmQgJHt2YXJOYW1lfSBpbiAke3NvdXJjZX1gKTsKICAgIH0KICAgIHJldHVybiBwYXJzZUpTT04oc291cmNlLCB2YXJOYW1lLCBjdXRBZnRlckpTT04oYCR7cHJlcGVuZEpTT059JHtqc29uU3RyfWApKTsKICB9OwogIAogIGJldHdlZW4gPSAoaGF5c3RhY2ssIGxlZnQsIHJpZ2h0KSA9PiB7CiAgICBsZXQgcG9zOwogICAgaWYgKGxlZnQgaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgY29uc3QgbWF0Y2ggPSBoYXlzdGFjay5tYXRjaChsZWZ0KTsKICAgICAgaWYgKCFtYXRjaCkgeyByZXR1cm4gJyc7IH0KICAgICAgcG9zID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7CiAgICB9IGVsc2UgewogICAgICBwb3MgPSBoYXlzdGFjay5pbmRleE9mKGxlZnQpOwogICAgICBpZiAocG9zID09PSAtMSkgeyByZXR1cm4gJyc7IH0KICAgICAgcG9zICs9IGxlZnQubGVuZ3RoOwogICAgfQogICAgaGF5c3RhY2sgPSBoYXlzdGFjay5zbGljZShwb3MpOwogICAgcG9zID0gaGF5c3RhY2suaW5kZXhPZihyaWdodCk7CiAgICBpZiAocG9zID09PSAtMSkgeyByZXR1cm4gJyc7IH0KICAgIGhheXN0YWNrID0gaGF5c3RhY2suc2xpY2UoMCwgcG9zKTsKICAgIHJldHVybiBoYXlzdGFjazsKICB9OwogIAogIGN1dEFmdGVySlNPTiA9IG1peGVkSnNvbiA9PiB7CiAgICBsZXQgb3BlbiwgY2xvc2U7CiAgICBpZiAobWl4ZWRKc29uWzBdID09PSAnWycpIHsKICAgICAgb3BlbiA9ICdbJzsKICAgICAgY2xvc2UgPSAnXSc7CiAgICB9IGVsc2UgaWYgKG1peGVkSnNvblswXSA9PT0gJ3snKSB7CiAgICAgIG9wZW4gPSAneyc7CiAgICAgIGNsb3NlID0gJ30nOwogICAgfQogIAogICAgaWYgKCFvcGVuKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY3V0IHVuc3VwcG9ydGVkIEpTT04gKG5lZWQgdG8gYmVnaW4gd2l0aCBbIG9yIHsgKSBidXQgZ290OiAke21peGVkSnNvblswXX1gKTsKICAgIH0KICAKICAgIC8vIFN0YXRlcyBpZiB0aGUgbG9vcCBpcyBjdXJyZW50bHkgaW4gYSBzdHJpbmcKICAgIGxldCBpc1N0cmluZyA9IGZhbHNlOwogIAogICAgLy8gU3RhdGVzIGlmIHRoZSBjdXJyZW50IGNoYXJhY3RlciBpcyB0cmVhdGVkIGFzIGVzY2FwZWQgb3Igbm90CiAgICBsZXQgaXNFc2NhcGVkID0gZmFsc2U7CiAgCiAgICAvLyBDdXJyZW50IG9wZW4gYnJhY2tldHMgdG8gYmUgY2xvc2VkCiAgICBsZXQgY291bnRlciA9IDA7CiAgCiAgICBsZXQgaTsKICAgIGZvciAoaSA9IDA7IGkgPCBtaXhlZEpzb24ubGVuZ3RoOyBpKyspIHsKICAgICAgLy8gVG9nZ2xlIHRoZSBpc1N0cmluZyBib29sZWFuIHdoZW4gbGVhdmluZy9lbnRlcmluZyBzdHJpbmcKICAgICAgaWYgKG1peGVkSnNvbltpXSA9PT0gJyInICYmICFpc0VzY2FwZWQpIHsKICAgICAgICBpc1N0cmluZyA9ICFpc1N0cmluZzsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogIAogICAgICAvLyBUb2dnbGUgdGhlIGlzRXNjYXBlZCBib29sZWFuIGZvciBldmVyeSBiYWNrc2xhc2gKICAgICAgLy8gUmVzZXQgZm9yIGV2ZXJ5IHJlZ3VsYXIgY2hhcmFjdGVyCiAgICAgIGlzRXNjYXBlZCA9IG1peGVkSnNvbltpXSA9PT0gJ1xcJyAmJiAhaXNFc2NhcGVkOwogIAogICAgICBpZiAoaXNTdHJpbmcpIGNvbnRpbnVlOwogIAogICAgICBpZiAobWl4ZWRKc29uW2ldID09PSBvcGVuKSB7CiAgICAgICAgY291bnRlcisrOwogICAgICB9IGVsc2UgaWYgKG1peGVkSnNvbltpXSA9PT0gY2xvc2UpIHsKICAgICAgICBjb3VudGVyLS07CiAgICAgIH0KICAKICAgICAgLy8gQWxsIGJyYWNrZXRzIGhhdmUgYmVlbiBjbG9zZWQsIHRodXMgZW5kIG9mIEpTT04gaXMgcmVhY2hlZAogICAgICBpZiAoY291bnRlciA9PT0gMCkgewogICAgICAgIC8vIFJldHVybiB0aGUgY3V0IEpTT04KICAgICAgICByZXR1cm4gbWl4ZWRKc29uLnN1YnN0cigwLCBpICsgMSk7CiAgICAgIH0KICAgIH0KICAKICAgIC8vIFdlIHJhbiB0aHJvdWdoIHRoZSB3aG9sZSBzdHJpbmcgYW5kIGVuZGVkIHVwIHdpdGggYW4gdW5jbG9zZWQgYnJhY2tldAogICAgdGhyb3cgRXJyb3IoIkNhbid0IGN1dCB1bnN1cHBvcnRlZCBKU09OIChubyBtYXRjaGluZyBjbG9zaW5nIGJyYWNrZXQgZm91bmQpIik7CiAgfTsKICAKICBjb25zdCBqc29uQ2xvc2luZ0NoYXJzID0gL15bKVxdfSdcc10rLzsKICBmdW5jdGlvbiBwYXJzZUpTT04oc291cmNlLCB2YXJOYW1lLCBqc29uKSB7CiAgICBpZiAoIWpzb24gfHwgdHlwZW9mIGpzb24gPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiBqc29uOwogICAgfSBlbHNlIHsKICAgICAgdHJ5IHsKICAgICAgICBqc29uID0ganNvbi5yZXBsYWNlKGpzb25DbG9zaW5nQ2hhcnMsICcnKTsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgdGhyb3cgRXJyb3IoYEVycm9yIHBhcnNpbmcgJHt2YXJOYW1lfSBpbiAke3NvdXJjZX06ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgIH0KICAgIH0KICB9Owo=",
  "javascript_search": ""
}
